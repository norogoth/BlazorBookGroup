@using BlazorBookGroup.Services
@using BlazorBookGroup.Data
@using Blazored.FluentValidation
@inject PostListService PostListService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.AddCircle" Class="mr-3 mb-n1" />
            Create a new post
        </MudText>
    </TitleContent>
    <DialogContent>
        <div class="d-flex flex-column">
            <EditForm Model="@_post" OnValidSubmit="OnValidSubmit">
                <DataAnnotationsValidator />
                <FluentValidationValidator />
                <ValidationSummary />
                <MudGrid>
                    <MudItem xs="12" sm="7">
                        <MudCard>
                            <MudCardContent>
                                <MudTextField Required="true" Label="Quote" Class="mt-3"
                                              @bind-Value="_post.Content.Quote" For="@(() => _post.Content.Quote)" />
                                <MudTextField Required="true" Label="Location of Quote" HelperText="Choose a strong password" Class="mt-3"
                                              @bind-Value="_post.Content.QuoteLocation" For="@(() => _post.Content.QuoteLocation)" InputType="InputType.Password" />
                                <MudTextField Label="Note" HelperText="Add a note" Class="mt-3"
                                              @bind-Value="_post.Content.Note" For="@(() => _post.Content.Note)" InputType="InputType.Password" />
                            </MudCardContent>
                            <MudCardActions>
                                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                            </MudCardActions>
                        </MudCard>
                    </MudItem>
                    <MudItem xs="12" sm="5">
                        <MudPaper Class="pa-4 mud-height-full">
                            <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                            @if (success)
                            {
                                <MudText Color="Color.Success">Success</MudText>
                            }
                            else
                            {
                                <MudText Color="@Color.Error">
                                    <ValidationSummary />
                                </MudText>
                            }
                        </MudPaper>
                    </MudItem>
                    <MudItem xs="12">
                        <MudText Typo="Typo.body2" Align="Align.Center">
                            Fill out the form correctly to see the success message.
                        </MudText>
                    </MudItem>
                </MudGrid>
            </EditForm>
            <MudButton OnClick="Cancel" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
        </div>
    </DialogContent>
</MudDialog>

@code {
    [Parameter]
    public bool IsOpen { get; set; }
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    private PostDataModel _postDataModel;
    private UserDataModel _user;
    private Post _post;
    private IEnumerable<Post> _posts;

    bool success;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _posts = PostListService.GetPosts();
    }
    public SubmitPostModal()
    {
        _postDataModel = new();
        _user = new();
        _post = new Post(_postDataModel, _user);
    }

    public SubmitPostModal(PostDataModel postDataModel, UserDataModel userDataModel)
    {
        _postDataModel = postDataModel;
        _user = userDataModel;
        Post post = new Post(postDataModel, userDataModel);
    }
    public void Cancel()
    {
        MudDialog.Cancel();
    }
    public async Task ToggleOpen()
    {
        if (IsOpen)
            IsOpen = false;
        else
            IsOpen = true;

        await IsOpenChanged.InvokeAsync(IsOpen);
    }
    public void OnValidSubmit()
    {
        success = true;
        Console.WriteLine("Form submitted");
        Console.WriteLine($"Quote: {_post.Content.Quote}");
        PostListService.AddPost(_post);
        StateHasChanged();
    }
}
