@page "/postlist"

@using BlazorBookGroup.Pages
@using BlazorBookGroup.Services;
@using System.ComponentModel.DataAnnotations
@inject PostListService PostListService
@inject IDialogService DialogService

<ul>
    @foreach (Post post in posts)
        {
            <li class="postli">
                <PostPage Post="@post"/>
            </li>
        }
</ul>


<MudFab Class="sticky" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@ToggleOpen" />

<SubmitPostModal @bind-IsOpen="IsOpen" />


@code {
    private Boolean _isDialog;

    private IEnumerable<Post> posts;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        posts = PostListService.GetPosts();
    }
    public bool IsOpen = false;

    public async Task ToggleOpen()
    {
        //var parameters = new DialogParameters { ["server"] = server };

        var dialog = await DialogService.ShowAsync<SubmitPostModal>("Delete Server"/*, parameters*/);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            //In a real world scenario we would reload the data from the source here since we "removed" it in the dialog already.
            //Guid.TryParse(result.Data.ToString(), out Guid deletedServer);
            //Servers.RemoveAll(item => item.Id == deletedServer);
        }
    }



    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}