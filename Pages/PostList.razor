@page "/postlist"

@using BlazorBookGroup.Pages
@using BlazorBookGroup.Services;
@using System.ComponentModel.DataAnnotations
@inject PostListService PostListService

<ul>
    @foreach (Post post in posts)
        {
            <li class="postli">
                <PostPage Post="@post"/>
            </li>
        }
</ul>


<MudFab Class="sticky" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="@ToggleOpen" />

<MudPopover AnchorOrigin="Origin.CenterCenter" Open="@IsOpen" Fixed="true" >
    <div class="d-flex flex-column">
        <EditForm Model="@model" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator />
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudCard>
                        <MudCardContent>
                            <MudTextField Label="First name" HelperText="Max. 8 characters"
                                          @bind-Value="model.Username" For="@(() => model.Username)" />
                            <MudTextField Label="Email" Class="mt-3"
                                          @bind-Value="model.Email" For="@(() => model.Email)" />
                            <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                          @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" />
                            <MudTextField Label="Password" HelperText="Repeat the password" Class="mt-3"
                                          @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" />
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">Validation Summary</MudText>
                        @if (success)
                        {
                            <MudText Color="Color.Success">Success</MudText>
                        }
                        else
                        {
                            <MudText Color="@Color.Error">
                                <ValidationSummary />
                            </MudText>
                        }
                    </MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudText Typo="Typo.body2" Align="Align.Center">
                        Fill out the form correctly to see the success message.
                    </MudText>
                </MudItem>
            </MudGrid>
        </EditForm>
        <MudButton OnClick="@ToggleOpen" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
    </div>
</MudPopover>


@code {
    public bool IsOpen;

    private IEnumerable<Post> posts;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        posts = PostListService.GetPosts();
    }
    public void ToggleOpen()
    {
        if (IsOpen)
            IsOpen = false;
        else
            IsOpen = true;
    }













    RegisterAccountForm model = new RegisterAccountForm();
    bool success;

    public class RegisterAccountForm
    {
        [Required]
        [StringLength(8, ErrorMessage = "Name length can't be more than 8.")]
        public string Username { get; set; }

        [Required]
        [EmailAddress]
        public string Email { get; set; }

        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required]
        [Compare(nameof(Password))]
        public string Password2 { get; set; }

    }

    private void OnValidSubmit(EditContext context)
    {
        success = true;
        StateHasChanged();
    }

}